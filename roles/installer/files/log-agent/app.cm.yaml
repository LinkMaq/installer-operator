apiVersion: v1
kind: ConfigMap
metadata:
  name: gems-log-agent-cm
  namespace: gemcloud-logging-system
  labels:
    app.kubernetes.io/app: fluentd
data:

  fluent.conf: |
    <system>
      root_dir /var/log/log-buffers/
    </system>

    <label @FLUENT_LOG>
      <match fluent.*>
        @id fluentd.stdout
        @type stdout
      </match>
    </label>

    @include /etc/fluent.config.d/*.conf
    
    <source>
      @id forward
      @type forward
    </source>

    # HTTP input for the liveness and readiness probes
    <source>
      @type http
      port 9880
    </source>

    <source>
      @id prometheus
      @type prometheus
      bind "#{ENV['FLUENTD_PROMETHEUS_BIND'] || '0.0.0.0'}"
      port "#{ENV['FLUENTD_PROMETHEUS_PORT'] || '24231'}"
      metrics_path "#{ENV['FLUENTD_PROMETHEUS_PATH'] || '/metrics'}"
    </source>

    <source>
      @id prometheus.monitor
      @type prometheus_monitor
    </source>

    <source>
      @id prometheus.output.monitor
      @type prometheus_output_monitor
    </source>

    @include /etc/fluent/kubernetes_metadata.conf
    @include /etc/fluent/gems-loki.conf
    @include /etc/fluent/monitoring.conf

  monitoring.conf: |-
    <source>
      @type exec
      command /bin/sh -c 'date +%s'
      tag process_start
      time_format %Y-%m-%d %H:%M:%S
      keys process_start_timestamp
    </source>
  
    <filter process_start>
      @type record_transformer
      enable_ruby true
      auto_typecast true
      <record>
        process_start_timestamp ${record["process_start_timestamp"].to_i}
      </record>
    </filter>

    <match process_start>
      @type prometheus
      <metric>
        type gauge
        name process_start_time_seconds
        desc Timestamp of the process start in seconds
        key process_start_timestamp
      </metric>
      <labels>
        application "gems-log-agent"
      </labels>
    </match>

  kubernetes_metadata.conf: |-
    <filter kubernetes.var.log.containers.**>
      @type kubernetes_metadata
      @id kubernetes_metadata_container_out
      skip_container_metadata true
      skip_master_url true
      cache_size 102400
      cache_ttl 3600
    </filter>

  gems-loki.conf: |-
    <match kubernetes.var.log.containers.**>
      @type record_modifier
      @id label.container.out
      tag ${record.dig('kubernetes', 'namespace_name') ? 'loki.kubernetes.var.log.containers' : 'dropped.kubernetes.var.log.containers'}
      <record>
        label ${["#{ENV['GEMS_CLUSTER'] || 'gems-default'}", (record.dig("kubernetes", "namespace_name") || 'nonamespace'), (record.dig("kubernetes", "labels", "app_kubernetes_io/name") || 'noapp')].join('_')}
        gems_tenant ${record.dig('kubernetes', 'labels', 'gems_cloudminds_com/tenant')}
        gems_project ${record.dig('kubernetes', 'namespace_labels', 'gems_cloudminds_com/project')}
        gems_environment ${record.dig('kubernetes', 'namespace_labels', 'gems_cloudminds_com/environment')}
        k8s_cloud_cluster "#{ENV['GEMS_CLUSTER'] || 'gems-default'}"
        k8s_node ${record.dig('kubernetes', 'host')}
        k8s_container_name ${record.dig('kubernetes', 'container_name')}
        k8s_app_name ${record.dig('kubernetes', 'labels', 'gems_cloudminds_com/application')}
        k8s_pod_name ${record.dig('kubernetes', 'pod_name')}
        k8s_namespace_name ${record.dig('kubernetes', 'namespace_name')}
        k8s_image_version ${record.dig('kubernetes', 'labels', 'app_image_version')}
      </record>
      remove_keys docker
    </match>

    <filter loki.**>
      @type prometheus
      <metric>
        type counter
        name logging_entry_count
        desc Total number of log entries generated by either application containers or system components
      </metric>
      <labels>
        gems_tenant ${tenant}
        gems_project ${project}
        gems_environment ${environment}
        k8s_cloud_cluster ${cluster}
        k8s_app_name ${application}
        k8s_pod_name ${pod}
        k8s_namespace_name ${namespace}
        k8s_image_version ${image}
      </labels>
    </filter>

    <match loki.**>
      @type loki
      @id loki.output
      @log_level info
      url "http://loki-gateway.gemcloud-logging-system.svc.cluster.local:3100"
      remove_keys formated_time,kubernetes,logtag
      drop_single_key true
      <label>
        gems_tenant
        gems_project
        gems_environment
        label
        stream
        k8s_cloud_cluster
        k8s_container_name
        k8s_node 
        k8s_app_name 
        k8s_pod_name
        k8s_namespace_name
        k8s_image_version 
      </label>
      <buffer label>
        @type file
        path /var/log/log-buffers
        flush_mode interval
        flush_thread_count 4
        flush_interval 3s
        retry_type exponential_backoff
        retry_wait 2s
        retry_max_interval 60s
        retry_timeout 12h
        chunk_limit_size 8M
        total_limit_size 5G
        queued_chunks_limit_size 64
        overflow_action drop_oldest_chunk
      </buffer>
    </match>

    <match dropped.**>
      @id log.dropped
      @type null
    </match>